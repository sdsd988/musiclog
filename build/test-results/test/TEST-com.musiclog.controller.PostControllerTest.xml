<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.musiclog.controller.PostControllerTest" tests="9" skipped="0" failures="0" errors="0" timestamp="2023-10-08T12:31:58" hostname="jeongsang-yun-ui-MacBookAir.local" time="0.266">
  <properties/>
  <testcase name="존재하지 않는 게시글 수정" classname="com.musiclog.controller.PostControllerTest" time="0.032"/>
  <testcase name="글 작성 요청 시 title 값은 필수다." classname="com.musiclog.controller.PostControllerTest" time="0.015"/>
  <testcase name="글 작성" classname="com.musiclog.controller.PostControllerTest" time="0.064"/>
  <testcase name="글 1개 조회" classname="com.musiclog.controller.PostControllerTest" time="0.018"/>
  <testcase name="글 여러개 조회" classname="com.musiclog.controller.PostControllerTest" time="0.021"/>
  <testcase name="글 여러개 조회 페이징" classname="com.musiclog.controller.PostControllerTest" time="0.05"/>
  <testcase name="글 제목 수정" classname="com.musiclog.controller.PostControllerTest" time="0.026"/>
  <testcase name="게시글 삭제" classname="com.musiclog.controller.PostControllerTest" time="0.021"/>
  <testcase name="존재하지 않는 게시글 조회" classname="com.musiclog.controller.PostControllerTest" time="0.009"/>
  <system-out><![CDATA[2023-10-08T21:31:58.293+09:00  INFO 11619 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.musiclog.controller.PostControllerTest]: PostControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-10-08T21:31:58.298+09:00  INFO 11619 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.musiclog.MusiclogApplication for test class com.musiclog.controller.PostControllerTest
2023-10-08T21:31:58.317+09:00  INFO 11619 --- [    Test worker] Spring Security Debugger                 : 

************************************************************

Request received for PATCH '/posts/3':

org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@518e6d6c

servletPath:
pathInfo:/posts/3
headers: 
Content-Type: application/json;charset=UTF-8
Content-Length: 44


Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextHolderFilter
  HeaderWriterFilter
  LogoutFilter
  EmailPasswordAuthFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  RememberMeAuthenticationFilter
  AnonymousAuthenticationFilter
  ExceptionTranslationFilter
  AuthorizationFilter
]


************************************************************



MockHttpServletRequest:
      HTTP Method = PATCH
      Request URI = /posts/3
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"44"]
             Body = {"title":"막차","content":"노래 소개"}
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=sdsd98987@gmail.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, credentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN]]]}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#edit(Long, PostEdit)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.musiclog.exception.PostNotFound

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"code":"404","message":"존재하지 않는 글입니다.","validation":{}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-10-08T21:31:58.339+09:00  INFO 11619 --- [    Test worker] Spring Security Debugger                 : 

************************************************************

Request received for POST '/posts':

org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@71adea8d

servletPath:
pathInfo:/posts
headers: 
Content-Type: application/json;charset=UTF-8
Content-Length: 43


Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextHolderFilter
  HeaderWriterFilter
  LogoutFilter
  EmailPasswordAuthFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  RememberMeAuthenticationFilter
  AnonymousAuthenticationFilter
  ExceptionTranslationFilter
  AuthorizationFilter
]


************************************************************



MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /posts
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"43"]
             Body = {"title":null,"content":"내용입니다."}
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#post(UserPrincipal, PostCreate)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.bind.MethodArgumentNotValidException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"code":"400","message":"잘못된 요청입니다.","validation":{"title":"타이틀을 입력해주세요!"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-10-08T21:31:58.360+09:00  INFO 11619 --- [    Test worker] Spring Security Debugger                 : 

************************************************************

Request received for POST '/posts':

org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@14d9d042

servletPath:
pathInfo:/posts
headers: 
Content-Type: application/json;charset=UTF-8
authorization: sy
Content-Length: 57


Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextHolderFilter
  HeaderWriterFilter
  LogoutFilter
  EmailPasswordAuthFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  RememberMeAuthenticationFilter
  AnonymousAuthenticationFilter
  ExceptionTranslationFilter
  AuthorizationFilter
]


************************************************************



MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /posts
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", authorization:"sy", Content-Length:"57"]
             Body = {"title":"제목입니다.","content":"내용입니다."}
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=com.musiclog.config.UserPrincipal [Username=sdsd98987@gmail.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, credentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN]]]}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#post(UserPrincipal, PostCreate)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-10-08T21:31:58.420+09:00  INFO 11619 --- [    Test worker] Spring Security Debugger                 : 

************************************************************

Request received for GET '/posts/27':

org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@7277fa93

servletPath:
pathInfo:/posts/27
headers: 
Content-Type: application/json;charset=UTF-8


Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextHolderFilter
  HeaderWriterFilter
  LogoutFilter
  EmailPasswordAuthFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  RememberMeAuthenticationFilter
  AnonymousAuthenticationFilter
  ExceptionTranslationFilter
  AuthorizationFilter
]


************************************************************



MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /posts/27
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#get(Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"id":27,"title":"1234567890","content":"bar"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-10-08T21:31:58.441+09:00  INFO 11619 --- [    Test worker] Spring Security Debugger                 : 

************************************************************

Request received for GET '/posts?page=1&size=10':

org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@1228a579

servletPath:
pathInfo:/posts
headers: 
Content-Type: application/json;charset=UTF-8


Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextHolderFilter
  HeaderWriterFilter
  LogoutFilter
  EmailPasswordAuthFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  RememberMeAuthenticationFilter
  AnonymousAuthenticationFilter
  ExceptionTranslationFilter
  AuthorizationFilter
]


************************************************************



MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /posts
       Parameters = {page=[1], size=[10]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#getList(PostSearch)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = [{"id":29,"title":"title_2","content":"content_2"},{"id":28,"title":"title_1","content":"content_1"}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-10-08T21:31:58.475+09:00  INFO 11619 --- [    Test worker] Spring Security Debugger                 : 

************************************************************

Request received for GET '/posts?page=0&size=10':

org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@35e79be0

servletPath:
pathInfo:/posts
headers: 
Content-Type: application/json;charset=UTF-8


Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextHolderFilter
  HeaderWriterFilter
  LogoutFilter
  EmailPasswordAuthFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  RememberMeAuthenticationFilter
  AnonymousAuthenticationFilter
  ExceptionTranslationFilter
  AuthorizationFilter
]


************************************************************



MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /posts
       Parameters = {page=[0], size=[10]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#getList(PostSearch)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = [{"id":49,"title":"음악 제목 19","content":"노래 소개 19"},{"id":48,"title":"음악 제목 18","content":"노래 소개 18"},{"id":47,"title":"음악 제목 17","content":"노래 소개 17"},{"id":46,"title":"음악 제목 16","content":"노래 소개 16"},{"id":45,"title":"음악 제목 15","content":"노래 소개 15"},{"id":44,"title":"음악 제목 14","content":"노래 소개 14"},{"id":43,"title":"음악 제목 13","content":"노래 소개 13"},{"id":42,"title":"음악 제목 12","content":"노래 소개 12"},{"id":41,"title":"음악 제목 11","content":"노래 소개 11"},{"id":40,"title":"음악 제목 10","content":"노래 소개 10"}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-10-08T21:31:58.515+09:00  INFO 11619 --- [    Test worker] Spring Security Debugger                 : 

************************************************************

Request received for PATCH '/posts/50':

org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@70a8d2e1

servletPath:
pathInfo:/posts/50
headers: 
Content-Type: application/json;charset=UTF-8
Content-Length: 44


Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextHolderFilter
  HeaderWriterFilter
  LogoutFilter
  EmailPasswordAuthFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  RememberMeAuthenticationFilter
  AnonymousAuthenticationFilter
  ExceptionTranslationFilter
  AuthorizationFilter
]


************************************************************



MockHttpServletRequest:
      HTTP Method = PATCH
      Request URI = /posts/50
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"44"]
             Body = {"title":"막차","content":"노래 소개"}
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=sdsd98987@gmail.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, credentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN]]]}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#edit(Long, PostEdit)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-10-08T21:31:58.545+09:00  INFO 11619 --- [    Test worker] Spring Security Debugger                 : 

************************************************************

Request received for DELETE '/posts/51':

org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@6bd4d24b

servletPath:
pathInfo:/posts/51
headers: 
Content-Type: application/json;charset=UTF-8


Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextHolderFilter
  HeaderWriterFilter
  LogoutFilter
  EmailPasswordAuthFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  RememberMeAuthenticationFilter
  AnonymousAuthenticationFilter
  ExceptionTranslationFilter
  AuthorizationFilter
]


************************************************************



MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /posts/51
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=com.musiclog.config.UserPrincipal [Username=sdsd98987@gmail.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, credentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN]]]}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#delete(Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-10-08T21:31:58.561+09:00  INFO 11619 --- [    Test worker] Spring Security Debugger                 : 

************************************************************

Request received for GET '/posts/1':

org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@72ce2982

servletPath:
pathInfo:/posts/1
headers: 
Content-Type: application/json;charset=UTF-8


Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextHolderFilter
  HeaderWriterFilter
  LogoutFilter
  EmailPasswordAuthFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  RememberMeAuthenticationFilter
  AnonymousAuthenticationFilter
  ExceptionTranslationFilter
  AuthorizationFilter
]


************************************************************



MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /posts/1
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#get(Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.musiclog.exception.PostNotFound

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"code":"404","message":"존재하지 않는 글입니다.","validation":{}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
