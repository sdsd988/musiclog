<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.musiclog.controller.PostControllerTest" tests="10" skipped="0" failures="0" errors="0" timestamp="2023-09-26T17:27:50" hostname="jeongsang-yun-ui-MacBookAir.local" time="0.179">
  <properties/>
  <testcase name="존재하지 않는 게시글 수정" classname="com.musiclog.controller.PostControllerTest" time="0.014"/>
  <testcase name="게시글 작성시 제목에 '바보'는 포함될 수 없다." classname="com.musiclog.controller.PostControllerTest" time="0.011"/>
  <testcase name="글 작성 요청 시 title 값은 필수다." classname="com.musiclog.controller.PostControllerTest" time="0.009"/>
  <testcase name="글 작성 요청 시 DB에 값이 저장된다." classname="com.musiclog.controller.PostControllerTest" time="0.011"/>
  <testcase name="글 1개 조회" classname="com.musiclog.controller.PostControllerTest" time="0.01"/>
  <testcase name="글 여러개 조회" classname="com.musiclog.controller.PostControllerTest" time="0.02"/>
  <testcase name="글 여러개 조회 페이징" classname="com.musiclog.controller.PostControllerTest" time="0.047"/>
  <testcase name="글 제목 수정" classname="com.musiclog.controller.PostControllerTest" time="0.012"/>
  <testcase name="게시글 삭제" classname="com.musiclog.controller.PostControllerTest" time="0.02"/>
  <testcase name="존재하지 않는 게시글 조회" classname="com.musiclog.controller.PostControllerTest" time="0.016"/>
  <system-out><![CDATA[2023-09-27T02:27:50.116+09:00  INFO 38434 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.musiclog.controller.PostControllerTest]: PostControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-09-27T02:27:50.118+09:00  INFO 38434 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.musiclog.MusiclogApplication for test class com.musiclog.controller.PostControllerTest

MockHttpServletRequest:
      HTTP Method = PATCH
      Request URI = /posts/3
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"44"]
             Body = {"title":"막차","content":"노래 소개"}
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#edit(Long, PostEdit)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.musiclog.exception.PostNotFound

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"code":"404","message":"존재하지 않는 글입니다.","validation":{}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /posts
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"59"]
             Body = {"title":"나는 바보입니다","content":"반포자이"}
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#post(PostCreate)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.musiclog.exception.InvalidRequest

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"code":"400","message":"잘못된 요청입니다.","validation":{"title":"제목에 바보를 포함할 수 없습니다."}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /posts
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"43"]
             Body = {"title":null,"content":"내용입니다."}
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#post(PostCreate)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.bind.MethodArgumentNotValidException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"code":"400","message":"잘못된 요청입니다.","validation":{"title":"타이틀을 입력해주세요!"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /posts
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", authorization:"sy", Content-Length:"57"]
             Body = {"title":"제목입니다.","content":"내용입니다."}
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#post(PostCreate)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /posts/4
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#get(Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"id":4,"title":"1234567890","content":"bar"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /posts
       Parameters = {page=[1], size=[10]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#getList(PostSearch)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = [{"id":6,"title":"title_2","content":"content_2"},{"id":5,"title":"title_1","content":"content_1"}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /posts
       Parameters = {page=[0], size=[10]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#getList(PostSearch)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = [{"id":26,"title":"음악 제목 19","content":"노래 소개 19"},{"id":25,"title":"음악 제목 18","content":"노래 소개 18"},{"id":24,"title":"음악 제목 17","content":"노래 소개 17"},{"id":23,"title":"음악 제목 16","content":"노래 소개 16"},{"id":22,"title":"음악 제목 15","content":"노래 소개 15"},{"id":21,"title":"음악 제목 14","content":"노래 소개 14"},{"id":20,"title":"음악 제목 13","content":"노래 소개 13"},{"id":19,"title":"음악 제목 12","content":"노래 소개 12"},{"id":18,"title":"음악 제목 11","content":"노래 소개 11"},{"id":17,"title":"음악 제목 10","content":"노래 소개 10"}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PATCH
      Request URI = /posts/27
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"44"]
             Body = {"title":"막차","content":"노래 소개"}
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#edit(Long, PostEdit)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /posts/28
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#delete(Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /posts/1
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.musiclog.controller.PostController
           Method = com.musiclog.controller.PostController#delete(Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.musiclog.exception.PostNotFound

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"code":"404","message":"존재하지 않는 글입니다.","validation":{}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
